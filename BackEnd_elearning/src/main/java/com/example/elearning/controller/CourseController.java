package com.example.elearning.controller;

import com.example.elearning.dto.request.CourseCreateRequest;
import com.example.elearning.dto.request.CourseUpdateRequest;
import com.example.elearning.dto.response.ApiResponse;
import com.example.elearning.dto.response.CourseDetailResponse;
import com.example.elearning.dto.response.CourseResponse;
import com.example.elearning.enums.CourseLevel;
import com.example.elearning.security.UserPrincipal;
import com.example.elearning.service.CourseService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/courses")
@Tag(name = "üìö Course Management", description = "APIs qu·∫£n l√Ω kh√≥a h·ªçc")
public class CourseController {

    private final CourseService courseService;

    @Autowired
    public CourseController(CourseService courseService) {
        this.courseService = courseService;
    }

    /**
     * Endpoint ch√≠nh ƒë·ªÉ l·∫•y danh s√°ch kh√≥a h·ªçc.
     * H·ªó tr·ª£ ph√¢n trang, t√¨m ki·∫øm theo t·ª´ kh√≥a v√† l·ªçc theo nhi·ªÅu ti√™u ch√≠.
     * ƒê√¢y l√† API c√¥ng khai.
     */
    @Operation(summary = "L·∫•y danh s√°ch kh√≥a h·ªçc v·ªõi t√¨m ki·∫øm v√† l·ªçc ƒë·ªông",
            description = "L·∫•y danh s√°ch kh√≥a h·ªçc v·ªõi ph√¢n trang, t√¨m ki·∫øm v√† l·ªçc. API n√†y public.")
    @GetMapping
    public ResponseEntity<ApiResponse<Page<CourseResponse>>> getAllCourses(
            @Parameter(description = "S·ªë trang (0-based)") @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "S·ªë l∆∞·ª£ng/trang") @RequestParam(defaultValue = "12") int size,
            @Parameter(description = "T√¨m ki·∫øm theo ti√™u ƒë·ªÅ/m√¥ t·∫£") @RequestParam(required = false) String search,
            @Parameter(description = "L·ªçc theo c·∫•p ƒë·ªô") @RequestParam(required = false) CourseLevel level,
            @Parameter(description = "L·ªçc kh√≥a h·ªçc mi·ªÖn ph√≠") @RequestParam(required = false) Boolean isFree
    ) {
        Page<CourseResponse> courses = courseService.getAllCourses(page, size, search, level, isFree);
        return ResponseEntity.ok(ApiResponse.success(courses));
    }

    @Operation(summary = "L·∫•y kh√≥a h·ªçc ph·ªï bi·∫øn", description = "L·∫•y danh s√°ch kh√≥a h·ªçc ph·ªï bi·∫øn cho trang ch·ªß. API n√†y public.")
    @GetMapping("/popular")
    public ResponseEntity<ApiResponse<List<CourseResponse>>> getPopularCourses(
            @Parameter(description = "S·ªë l∆∞·ª£ng kh√≥a h·ªçc mu·ªën l·∫•y") @RequestParam(defaultValue = "8") int limit
    ) {
        List<CourseResponse> courses = courseService.getPopularCourses(limit);
        return ResponseEntity.ok(ApiResponse.success(courses));
    }

    @Operation(summary = "L·∫•y kh√≥a h·ªçc mi·ªÖn ph√≠", description = "API n√†y public v√† ƒë√£ ƒë∆∞·ª£c t√≠ch h·ª£p v√†o endpoint ch√≠nh. Gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch ng∆∞·ª£c.")
    @GetMapping("/free")
    public ResponseEntity<ApiResponse<Page<CourseResponse>>> getFreeCourses(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "12") int size
    ) {
        Page<CourseResponse> courses = courseService.getFreeCourses(page, size);
        return ResponseEntity.ok(ApiResponse.success(courses));
    }

    @Operation(summary = "L·∫•y chi ti·∫øt kh√≥a h·ªçc theo ID", description = "API n√†y public.")
    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<CourseDetailResponse>> getCourseById(@PathVariable Long id) {
        CourseDetailResponse course = courseService.getCourseById(id);
        return ResponseEntity.ok(ApiResponse.success(course));
    }

    @Operation(summary = "L·∫•y kh√≥a h·ªçc theo slug", description = "API n√†y public.")
    @GetMapping("/slug/{slug}")
    public ResponseEntity<ApiResponse<CourseDetailResponse>> getCourseBySlug(@PathVariable String slug) {
        CourseDetailResponse course = courseService.getCourseBySlug(slug);
        return ResponseEntity.ok(ApiResponse.success(course));
    }

    @Operation(summary = "T·∫°o kh√≥a h·ªçc m·ªõi", description = "Ch·ªâ INSTRUCTOR ho·∫∑c ADMIN. Y√™u c·∫ßu JWT Token.", security = @SecurityRequirement(name = "bearerAuth"))
    @PostMapping
    public ResponseEntity<ApiResponse<CourseResponse>> createCourse(
            @Valid @RequestBody CourseCreateRequest request,
            @AuthenticationPrincipal UserPrincipal currentUser
    ) {
        CourseResponse course = courseService.createCourse(request, currentUser.getId());
        return ResponseEntity.ok(ApiResponse.success(course, "T·∫°o kh√≥a h·ªçc th√†nh c√¥ng"));
    }

    @Operation(summary = "C·∫≠p nh·∫≠t kh√≥a h·ªçc", description = "Ch·ªâ INSTRUCTOR ho·∫∑c ADMIN. Y√™u c·∫ßu JWT Token.", security = @SecurityRequirement(name = "bearerAuth"))
    @PutMapping("/{id}")
    public ResponseEntity<ApiResponse<CourseResponse>> updateCourse(
            @PathVariable Long id,
            @Valid @RequestBody CourseUpdateRequest request,
            @AuthenticationPrincipal UserPrincipal currentUser
    ) {
        CourseResponse course = courseService.updateCourse(id, request, currentUser.getId());
        return ResponseEntity.ok(ApiResponse.success(course, "C·∫≠p nh·∫≠t kh√≥a h·ªçc th√†nh c√¥ng"));
    }

    @Operation(summary = "X√≥a kh√≥a h·ªçc", description = "Ch·ªâ INSTRUCTOR ho·∫∑c ADMIN. Y√™u c·∫ßu JWT Token.", security = @SecurityRequirement(name = "bearerAuth"))
    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<Void>> deleteCourse(
            @PathVariable Long id,
            @AuthenticationPrincipal UserPrincipal currentUser
    ) {
        courseService.deleteCourse(id, currentUser.getId());
        return ResponseEntity.ok(ApiResponse.success(null, "X√≥a kh√≥a h·ªçc th√†nh c√¥ng"));
    }

    @Operation(summary = "Publish kh√≥a h·ªçc", description = "Ch·ªâ INSTRUCTOR ho·∫∑c ADMIN. Y√™u c·∫ßu JWT Token.", security = @SecurityRequirement(name = "bearerAuth"))
    @PostMapping("/{id}/publish")
    public ResponseEntity<ApiResponse<CourseResponse>> publishCourse(
            @PathVariable Long id,
            @AuthenticationPrincipal UserPrincipal currentUser
    ) {
        CourseResponse course = courseService.publishCourse(id, currentUser.getId());
        return ResponseEntity.ok(ApiResponse.success(course, "Publish kh√≥a h·ªçc th√†nh c√¥ng"));
    }
}